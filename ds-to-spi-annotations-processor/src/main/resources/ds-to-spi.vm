#if( ${component.packageName} )
package ${component.packageName};

#end
public class ${component.spiClassName}
       extends ${component.qualifiedClassName}
       implements org.daisy.common.spi.ServiceWithProperties
#if( ${component.immediate} )
                , org.daisy.common.spi.CreateOnStart ## maybe this is not exactly what we want but it's close enough
#end
{
	
	private final java.util.Map spi_props;
	
	public ${component.spiClassName}() {
		super();
		spi_props = new java.util.HashMap();
#foreach($property in ${component.properties})
		spi_props.put(${property.keyLiteral}, ${property.valueLiteral});
#end
#foreach($reference in ${component.references})
		{
			java.util.Iterator<${reference.service}> services
				= org.daisy.common.spi.ServiceLoader.load(${reference.service}.class).iterator();
#if( ${reference.cardinality} == "1..1" )
			int minRef = 1;
			int maxRef = 1;
#elseif( ${reference.cardinality} == "1..n" )
			int minRef = 1;
			int maxRef = -1;
#elseif( ${reference.cardinality} == "0..1" )
			int minRef = 0;
			int maxRef = 1;
#else
			int minRef = 0;
			int maxRef = -1;
#end
			int refCount = 0;
			while (services.hasNext()) {
				try {
					${reference.service} service = services.next();
#if( ${reference.propertiesArgumentType} )
					${reference.propertiesArgumentType.getName()} props = new ${reference.propertiesArgumentType.getName()}();
					for (java.util.Map.Entry kv : (java.util.Set<java.util.Map.Entry>)
							((org.daisy.common.spi.ServiceWithProperties)service).spi_getProperties().entrySet()) {
						props.put(kv.getKey(), kv.getValue());
					}
					${reference.methodName}(service, props);
#else
					${reference.methodName}(service);
#end
					refCount++;
					if (maxRef > 0 && refCount == maxRef)
						break;
				} catch (Exception e) {
				}
			}
			if (refCount < minRef) {
				throw new RuntimeException("No ${reference.service} found");
			}
		}
#end
#if( ${component.activate} )
#if( ${component.activate.propertiesArgumentType} )
		${component.activate.propertiesArgumentType.getName()} props = new ${component.activate.propertiesArgumentType.getName()}();
#foreach($property in ${component.properties})
		props.put(${property.keyLiteral}, ${property.valueLiteral});
#end
		${component.activate.methodName}(props);
#else
		${component.activate.methodName}();
#end
#end
	}
	
	public java.util.Map spi_getProperties() {
		return spi_props;
	}
}
